// Global KiddoVerse namespace
var KV = KV || {};
KV.Player = class Player { constructor(scene,camera,world,audioManager){this.scene=scene;this.camera=camera;this.world=world;this.audioManager=audioManager;this.blockSize=KV.BLOCK_SIZE;this.height=1.75*this.blockSize;this.radius=0.35*this.blockSize;let startX=(world.chunkSize/2+0.5)*this.blockSize;let startZ=(world.chunkSize/2+0.5)*this.blockSize;let startY=this.findSafeSpawnY(startX,startZ,world)+this.height*0.1;this.position=new THREE.Vector3(startX,startY,startZ);this.velocity=new THREE.Vector3();this.onGround=false;this.isJumping=false;this.camera.position.copy(this.position);this.camera.position.y=this.position.y+this.height*0.85;this.boundingBox=new THREE.Box3();this.updateBoundingBox();console.log(`KV Player: Spawn attempt XZ(${startX.toFixed(1)},${startZ.toFixed(1)}) -> Final Y: ${startY.toFixed(1)}`);} findSafeSpawnY(wX,wZ,worldInst){const sX=Math.floor(wX/this.blockSize);const sZ=Math.floor(wZ/this.blockSize);const maxH=worldInst.chunkSize*(worldInst.verticalRenderDistance+3);for(let y=maxH;y>0;y--){const bT=worldInst.getBlock(sX*this.blockSize,y*this.blockSize,sZ*this.blockSize);if(bT!==KV.BLOCK_TYPES.AIR){return(y+1)*this.blockSize;}}console.warn(`Player.findSafeSpawnY: No ground at XZ(${sX},${sZ}). Defaulting Y.`);return worldInst.chunkSize*1.5*this.blockSize;} updateBoundingBox(){const bbCenter=this.position.clone().add(new THREE.Vector3(0,this.height/2,0));const bbSize=new THREE.Vector3(this.radius*2,this.height,this.radius*2);this.boundingBox.setFromCenterAndSize(bbCenter,bbSize);} update(dT){if(!this.onGround){this.velocity.y-=9.81*this.blockSize*2.5*dT;}else{if(!this.isJumping)this.velocity.y=0;}this.isJumping=false;let moveStep=this.velocity.clone().multiplyScalar(dT);this.handleCollisions(moveStep);this.position.add(moveStep);this.updateBoundingBox();this.camera.position.x=this.position.x;this.camera.position.z=this.position.z;this.camera.position.y=this.position.y+this.height*0.85;this.onGround=this.checkOnGround();} handleCollisions(mS){const oMY=mS.y;this.position.x+=mS.x;this.updateBoundingBox();if(this.collidesWithWorld(this.boundingBox)){this.position.x-=mS.x;mS.x=0;this.velocity.x=0;}this.position.z+=mS.z;this.updateBoundingBox();if(this.collidesWithWorld(this.boundingBox)){this.position.z-=mS.z;mS.z=0;this.velocity.z=0;}this.position.y+=oMY;this.updateBoundingBox();if(this.collidesWithWorld(this.boundingBox)){this.position.y-=oMY;if(oMY<0){this.onGround=true;}mS.y=0;this.velocity.y=0;}else{this.onGround=false;}this.updateBoundingBox();} collidesWithWorld(pBB){const minBX=Math.floor(pBB.min.x/this.blockSize);const maxBX=Math.floor(pBB.max.x/this.blockSize);const minBY=Math.floor(pBB.min.y/this.blockSize);const maxBY=Math.floor(pBB.max.y/this.blockSize-0.01);const minBZ=Math.floor(pBB.min.z/this.blockSize);const maxBZ=Math.floor(pBB.max.z/this.blockSize);for(let by=minBY;by<=maxBY;by++){for(let bz=minBZ;bz<=maxBZ;bz++){for(let bx=minBX;bx<=maxBX;bx++){const bT=this.world.getBlock(bx*this.blockSize,by*this.blockSize,bz*this.blockSize);if(bT!==KV.BLOCK_TYPES.AIR){return true;}}}}return false;} checkOnGround(){const gCB=new THREE.Box3(new THREE.Vector3(this.boundingBox.min.x+0.1*this.radius,this.boundingBox.min.y-0.1*this.blockSize,this.boundingBox.min.z+0.1*this.radius),new THREE.Vector3(this.boundingBox.max.x-0.1*this.radius,this.boundingBox.min.y-0.01*this.blockSize,this.boundingBox.max.z-0.1*this.radius));return this.collidesWithWorld(gCB);} jump(){if(this.onGround){this.velocity.y=6.0*this.blockSize;this.onGround=false;this.isJumping=true;if(this.audioManager){this.audioManager.playSound('jump',0.3);}}}};
console.log("KiddoVerse: Player class loaded.");
